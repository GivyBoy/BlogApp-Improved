# -*- coding: utf-8 -*-
"""BlogApp-Improved.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H2Avw15TGTDAcNWUK6x82LAC3cRgY-1e
"""

import pandas as pd
from pandas_datareader import data as web
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')

data= input('Enter the stocks here: ').upper()

for datum in data:
    if datum == ',':
        data = data.replace(datum, '')
stocks = data.split()

stock_data = pd.DataFrame()

start_date = '2015-01-01'
end_date = datetime.today().strftime('%Y-%m-%d')
for stock in stocks:
    try:
        stock_data[stock] = web.DataReader(stock, data_source='yahoo', start=start_date, end=end_date)['Adj Close']
    except:
        print('Enter the tickers(for example, AAPL for Apple) for the stocks.')
        break
try:
   investment = int(input("Enter the amount (in $USD) you'd like to invest, here: "))
except:
   print('Enter a non-decimal value.')

if len(stock_data.columns) > 0:  
  weights = np.array([1/len(stock_data.columns) for i in range(1, len(stock_data.columns)+1)])
else:
  weights = []

for stock in stock_data.columns.values:
  plt.figure(figsize=(8, 4))
  plt.plot(stock_data[stock])
  plt.title(f"{stock}'s Stock Price ($USD)")
  plt.xlabel('Date')
  plt.ylabel('Stock Price ($USD)')
  plt.legend([stock])
  plt.show()

if len(stock_data.columns) > 0: 
  daily_simple_returns = stock_data.pct_change()
  daily_simple_returns = round(daily_simple_returns, 4)*100
  daily_simple_returns_equal = daily_simple_returns[1258:].copy()
  daily_simple_returns_weighted = daily_simple_returns[1258:].copy()

  plt.figure(figsize=(10, 6))
  plt.plot(daily_simple_returns)
  plt.title('Volatility of the Individual Stocks')
  plt.xlabel('Date')
  plt.ylabel('Volatility (%)')
  plt.legend(daily_simple_returns, bbox_to_anchor=(1,1))
  plt.show()
else:
  print()

number_of_portfolios = int(input("Enter the number of porfolios you'd like to scan, here: "))
RF = 0
portfolio_returns = []
portfolio_risk = []
sharpe_ratio_port = []
portfolio_weights = []

for portfolio in range(number_of_portfolios):
        # generate a w random weight of length of number of stocks
    weights = np.random.random_sample(len(stock_data.columns))

    weights = weights / np.sum(weights)
    annualized_return = np.sum((daily_simple_returns_equal.mean() * weights) * 252)
    portfolio_returns.append(annualized_return)
        # variance
    matrix_covariance_portfolio = (daily_simple_returns_equal.cov()) * 252
    portfolio_variance = np.dot(weights.T, np.dot(matrix_covariance_portfolio, weights))
    portfolio_standard_deviation = np.sqrt(portfolio_variance)
    portfolio_risk.append(portfolio_standard_deviation)
        # sharpe_ratio
    sharpe_ratio = ((annualized_return - RF) / portfolio_standard_deviation)
    sharpe_ratio_port.append(sharpe_ratio)

    portfolio_weights.append(weights)

portfolio_risk = np.array(portfolio_risk)
portfolio_returns = np.array(portfolio_returns)
sharpe_ratio_port = np.array(sharpe_ratio_port)

porfolio_metrics = [portfolio_returns, portfolio_risk, sharpe_ratio_port, portfolio_weights]

portfolio_dfs = pd.DataFrame(porfolio_metrics)
portfolio_dfs = portfolio_dfs.T
portfolio_dfs.columns = ['Expected Portolio Returns', 'Portfolio Risk', 'Sharpe Ratio', 'Portfolio Weights']

    # convert from object to float the first three columns.
for col in ['Expected Portolio Returns', 'Portfolio Risk', 'Sharpe Ratio']:
    portfolio_dfs[col] = portfolio_dfs[col].astype(float)

    # portfolio with the highest Sharpe Ratio
Highest_sharpe_port = portfolio_dfs.iloc[portfolio_dfs['Sharpe Ratio'].idxmax()]
    # portfolio with the minimum risk
min_risk = portfolio_dfs.iloc[portfolio_dfs['Portfolio Risk'].idxmin()]

#plot data without indicators
plt.figure(figsize=(10, 5))
plt.scatter(portfolio_risk, portfolio_returns, c=portfolio_returns/portfolio_risk,cmap='YlGnBu', alpha=0.8)
plt.xlabel('Volatility (%)')
plt.ylabel('Expected Returns (%)')
plt.title('Portfolio Performance')
plt.colorbar(label='Sharpe ratio')
plt.show()

#plot data with indicators
plt.figure(figsize=(10, 5))
plt.scatter(portfolio_risk, portfolio_returns, c=portfolio_returns/portfolio_risk,cmap='YlGnBu', alpha=0.9)
plt.xlabel('Volatility (%)')
plt.ylabel('Expected Returns (%)')
plt.colorbar(label='Sharpe ratio')
plt.scatter(Highest_sharpe_port['Portfolio Risk'],Highest_sharpe_port['Expected Portolio Returns'], marker=(3,1,0),color='g',s=100, label='Maximum Sharpe ratio' )
plt.scatter(min_risk['Portfolio Risk'], min_risk['Expected Portolio Returns'], marker=(3,1,0), color='r',s=100, label='Minimum volatility')
plt.legend(labelspacing=0.8)
plt.title('Portfolio Performance (with indicators)')
plt.show()


print('-----------------------------------------------------------------------')
print(f"To maximize returns, your Portfolio should consist of: ")
for i in range(len(Highest_sharpe_port['Portfolio Weights'])):
    print(f"{round((Highest_sharpe_port['Portfolio Weights'][i]*100), 2)}% of {stocks[i]}")
print(f"Your Expected Portfolio Returns is: {round(Highest_sharpe_port['Expected Portolio Returns'], 2)}%")
print(f"Your Portfolio Risk is: {round(Highest_sharpe_port['Portfolio Risk'], 2)}%")
print(f"Your Sharpe Ratio is: {round(Highest_sharpe_port['Sharpe Ratio'], 2)}")
print('-----------------------------------------------------------------------')
print(f"To minimize risk, your Portfolio should consist of: ")
for i in range(len(min_risk['Portfolio Weights'])):
    print(f"{round((min_risk['Portfolio Weights'][i]*100), 2)}% of {stocks[i]}")
print(f"Your Expected Portfolio Returns is: {round(min_risk['Expected Portolio Returns'], 2)}%")
print(f"Your Portfolio Risk is: {round(min_risk['Portfolio Risk'], 2)}%")
print(f"Your Sharpe Ratio is: {round(min_risk['Sharpe Ratio'], 2)}")
print('-----------------------------------------------------------------------')

DailyReturns = pd.DataFrame()
DailyReturns = daily_simple_returns_equal.sum(axis=1)
daily_simple_returns_equal['Daily Returns'] = DailyReturns

port = [122]
port = pd.DataFrame(port)

daily_simple_returns_equal['Portfolio Value - Equal'] = port

daily_simple_returns_equal.iloc[0, -1,] = investment

for i in range(1, len(daily_simple_returns_equal.index)):
  daily_simple_returns_equal['Portfolio Value - Equal'][i] = daily_simple_returns_equal['Portfolio Value - Equal'][i-1] + daily_simple_returns_equal['Daily Returns'][i-1]

daily_simple_returns_equal

updatedW = Highest_sharpe_port['Portfolio Weights']
cols = daily_simple_returns_weighted.columns.values

AdjustedR = pd.DataFrame()

for i in range(len(updatedW)):
  Sum = daily_simple_returns_weighted[cols[i]]
  DailyReturnsW = pd.DataFrame(Sum)
  DailyReturns = DailyReturnsW.sum(axis=1) * (1 + round(updatedW[i], 3))
  AdjustedR[f"{cols[i]}'s AR"] = round(DailyReturns, 2)

TotalAR = AdjustedR.sum(axis=1)

AdjustedR['Total AR'] = TotalAR

port2 = [122]
port2 = pd.DataFrame(port2)

AdjustedR['Portfolio Value - Weighted'] = port

AdjustedR.iloc[0, -1,] = investment

for i in range(1, len(AdjustedR.index)):
  AdjustedR['Portfolio Value - Weighted'][i] = AdjustedR['Portfolio Value - Weighted'][i-1] + AdjustedR['Total AR'][i-1]

plt.figure(figsize=(10, 5))
plt.plot(AdjustedR['Portfolio Value - Weighted'], c='red', label='Weighted Portfolio Value')
plt.plot(daily_simple_returns_equal['Portfolio Value - Equal'], c='black', label='Equal Weighted Portfolio Value')
plt.title('BACKTESTING - Portfolio Values Overtime')
plt.xlabel('Date')
plt.ylabel('Portfolio Value ($USD)')
plt.legend()
plt.show()

logReturns = pd.DataFrame()

start_date = '2020-01-01'
end_date = datetime.today().strftime('%Y-%m-%d')
logReturns['S&P500'] = web.DataReader('^GSPC', data_source='yahoo', start=start_date, end=end_date)['Adj Close']

port3 = [122]
port3 = pd.DataFrame(port3)

logReturns['S&P500 Returns'] = port3
for i in range(1, len(logReturns.index)):
  logReturns['S&P500 Returns'][i] = logReturns['S&P500'][i] - logReturns['S&P500'][i-1]

logReturns['S&P500 Portfolio'] = port3
logReturns.iloc[0, -1,] = investment



for i in range(1, len(logReturns.index)):
  logReturns['S&P500 Portfolio'][i] = logReturns['S&P500 Portfolio'][i-1] + logReturns['S&P500 Returns'][i]

logReturns['Adjusted Weights'] = AdjustedR['Portfolio Value - Weighted']
logReturns['Equal Weights'] = daily_simple_returns_equal['Portfolio Value - Equal']

logReturns = np.log(logReturns)

plt.figure(figsize=(10, 5))
plt.plot(logReturns['Adjusted Weights'], c='red', label='Weighted Portfolio Value')
plt.plot(logReturns['Equal Weights'], c='black', label='Equal Weighted Portfolio Value')
plt.plot(logReturns['S&P500 Portfolio'], c='blue', label='S&P500')
plt.title('BACKTESTING - Log Returns')
plt.xlabel('Date')
plt.ylabel('Portfolio Value ($USD)')
plt.legend(loc='lower right')
plt.show()

if AdjustedR['Portfolio Value - Weighted'][-1] > daily_simple_returns_equal['Portfolio Value - Equal'][-1]:
  print(f"The model was right! You would've made an extra ${round(AdjustedR['Portfolio Value - Weighted'][-1] - daily_simple_returns_equal['Portfolio Value - Equal'][-1], 2)} extra!")
else:
  print('The pandemic really hit hard! Not even the model could have predicted it.')



